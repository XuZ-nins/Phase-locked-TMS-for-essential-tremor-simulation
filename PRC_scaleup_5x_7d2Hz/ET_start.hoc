/* Author: Xu Zhang @UConn, Jan., 2020
This script initializes the network for 2000 ms under tremor-free condition.
*/

load_file("nrngui.hoc")

load_file("rngRead.hoc") // Load rng seeds
noiseSwitch=1 // Membrane and synaptic noises, 1/0 = turn on/off

// Loading individual cells
load_file("cell_ION.hoc")
load_file("cell_PC.hoc")
load_file("cell_DCN.hoc")
load_file("cell_TC.hoc")
load_file("cell_MC.hoc")

// Loading synaptic connections
load_file("syn_ION_PC.hoc")
load_file("syn_PC_DCN.hoc")
load_file("syn_DCN_ION.hoc")
load_file("syn_DCN_TC.hoc")
load_file("syn_TC_MC.hoc")
load_file("syn_MC_GrL.hoc")
load_file("syn_GrL_PC.hoc")

// One typical ET condition (tau = 12, R = 0.7)
PCDCNtaurnd = 682
PCDCNgrnd = 198
objref rngPCDCNtau, PCDCNg
rngPCDCNtau = new Random(PCDCNtaurnd)
rngPCDCNtau.normal(12,4)
PCDCNg = new Random(PCDCNgrnd)
PCDCNg.normal(0.7,0.0196)
for i = 0,999 {
	PC2DCN_syn[i].tau = rngPCDCNtau.repick()
	PC2DCN_syn[i].g = PC2DCN_syn[i].g*PCDCNg.repick()
}

access DCNcell

objref prcStim_group[1000]
for i = 0,999 {
	PCcell[i] prcStim_group[i] = new IClamp(0.3)
	prcStim_group[i].amp = 1 // 15e-2
	prcStim_group[i].del = 1e5
	prcStim_group[i].dur = 0.3
}

objref f_trialname
f_trialname = new File()
f_trialname.ropen("trialname_start.txt")

strdef f_PCap, f_DCNap, f_Vimap, f_IONap
strdef f_DCN1, f_DCN2, f_DCN3, f_DCN4, f_DCN5
strdef f_PCv
strdef f_Vim1, f_Vim2, f_Vim3, f_Vim4, f_Vim5
strdef f_iTMS
f_trialname.scanstr(f_PCap)
f_trialname.scanstr(f_DCNap)
f_trialname.scanstr(f_Vimap)
f_trialname.scanstr(f_IONap)
f_trialname.scanstr(f_DCN1)
f_trialname.scanstr(f_DCN2)
f_trialname.scanstr(f_DCN3)
f_trialname.scanstr(f_DCN4)
f_trialname.scanstr(f_DCN5)
f_trialname.scanstr(f_PCv)
f_trialname.scanstr(f_Vim1)
f_trialname.scanstr(f_Vim2)
f_trialname.scanstr(f_Vim3)
f_trialname.scanstr(f_Vim4)
f_trialname.scanstr(f_Vim5)
f_trialname.scanstr(f_iTMS)
f_trialname.close()

v_init = -57
dt = 0.0125
tstop = 2000
init()

objref f_IONapparams
f_IONapparams= new File()
f_IONapparams.ropen("IONparams_start.txt")
IONparam = f_IONapparams.scanvar()
f_IONapparams.close()

// Record PC
objref apc_PC[1000], apPC[1000]
for i = 0,999 {
PCcell[i] apc_PC[i] = new APCount(0.5)
apc_PC[i].thresh = -45
apPC[i] = new Vector()
apc_PC[i].record(apPC[i])
}

// Record DCN
objref apc_DCN[25], apDCN[25]
for i = 0,24 {
DCNcell[i] apc_DCN[i] = new APCount(0.5)
apc_DCN[i].thresh = -45
apDCN[i] = new Vector()
apc_DCN[i].record(apDCN[i])
}

// Record Vim
objref apc_Vim[25], apVim[25]
for i = 0,24 {
TCcell[i] apc_Vim[i] = new APCount(0.5)
apc_Vim[i].thresh = -45
apVim[i] = new Vector()
apc_Vim[i].record(apVim[i])
}

// Record ION
objref apc_ION[200], apION[200]
for i = 0,199 {
IONcell[i] apc_ION[i] = new APCount(0.5)
apc_ION[i].thresh = -45
apION[i] = new Vector()
apc_ION[i].record(apION[i])
}

//////////////////////////////////////////////////////////////////
// Simulation starts											//
run()
//																//
//////////////////////////////////////////////////////////////////

// Save PC
objref rec_PC
rec_PC = new File()
rec_PC.wopen(f_PCap)
for i = 0,999 {
    if (apPC[i].size()>0) {
        for j = 0,apPC[i].size()-1 {
            rec_PC.printf("%d,%f\n",i,apPC[i].x[j])
	}
    }
}
rec_PC.close()

// Save DCN
objref rec_DCN
rec_DCN = new File()
rec_DCN.wopen(f_DCNap)
for i = 0,24 {
    if (apDCN[i].size()>0) {
        for j = 0,apDCN[i].size()-1 {
            rec_DCN.printf("%d,%f\n",i,apDCN[i].x[j])
        }
    }
}
rec_DCN.close()

// Save Vim
objref rec_Vim
rec_Vim = new File()
rec_Vim.wopen(f_Vimap)
for i = 0,24 {
    if (apVim[i].size()>0) {
        for j = 0,apVim[i].size()-1 {
            rec_Vim.printf("%d,%f\n",i,apVim[i].x[j])
        }
    }
}
rec_Vim.close()

// Save ION
objref rec_ION
rec_ION = new File()
rec_ION.wopen(f_IONap)
for i = 0,199 {
    if (apION[i].size()>0) {
        for j = 0,apION[i].size()-1 {
            rec_ION.printf("%d,%f\n",i,apION[i].x[j])
        }
    }
}
rec_ION.close()

objref ss,f_ss
ss = new SaveState()
f_ss = new File()
ss.save()
f_ss.wopen("initialization/currentState.dat")
ss.fwrite(f_ss)
f_ss.close()

quit()
